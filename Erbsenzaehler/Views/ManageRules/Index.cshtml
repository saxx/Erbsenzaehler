@using Erbsenzaehler.Models
@model Erbsenzaehler.ViewModels.ManageRules.IndexViewModel
<h2>Regeln verwalten</h2>

@if (Model.ApplierResult != null)
{
    <div class="alert alert-success">
        @Model.ApplierResult.LinesUpdated.ToString("N0") @(Model.ApplierResult.LinesUpdated == 1 ? "Buchungszeile wurde" : "Buchungszeilen wurden") aktualisiert.
    </div>
}
else
{
    <div class="alert alert-info">
        Verwenden sie Regeln, um Ihre Buchungszeilen automatisch zu kategorisieren und zu korrgieren. Der Text jeder Buchungszeile wird verwendet, um festzustellen,
        welche Regel auf welche Buchungszeile zutrifft.
    </div>
}


<div ng-app="erbsenzaehlerApp" ng-controller="rulesController">
    <table class="table table-striped rules-editor" ng-show="!loading">
        <tr>
            <th>Text der Buchungszeile</th>
            <th>Kategorie ändern</th>
            <th>Buchungszeilen ignorieren</th>
            <th>Datum ändern</th>
            <th>
                <button class="btn btn-sm btn-success pull-right" ng-click="addRule()">Neue Regel hinzufügen</button>
            </th>
        </tr>

        <tr ng-repeat="rule in rules">
            <td>
                <textarea ng-model="rule.regex" ng-blur="saveRule(rule, $event)" class="form-control" placeholder="Text? Sie können hier auch Regular Expressions verwenden." required></textarea>
            </td>
            <td>
                <input type="text" ng-model="rule.category" ng-blur="saveRule(rule)" class="form-control" placeholder="Welche Kategorie?"/>
            </td>
            <td>
                <select ng-model="rule.ignore" class="form-control" ng-change="saveRule(rule)" ng-options="o.value as o.name for o in ignoreOptions"></select>
            </td>
            <td>
                <select ng-model="rule.date" class="form-control" ng-change="saveRule(rule)" ng-options="o.value as o.name for o in dateOptions"></select>
            </td>
            <td>
                <div>
                    <button class="btn btn-sm btn-danger btn-block" ng-click="deleteRule(rule)">Löschen</button>
                </div>
                <div ng-class="{'label label-info': rule.affectedLines != '0', 'label label-warning': rule.affectedLines == '0' }">
                    {{ rule.affectedLines }} Buchungszeilen betroffen
                </div>
            </td>
        </tr>
    </table>
</div>


<div class="row">
    <div class="col-sm-4">
        <hr/>
        <h4>Regeln importieren oder exportieren</h4>

        @using (Html.BeginForm("Download", "ManageRules"))
        {
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-default btn-block">Regeln exportieren</button>
        }
        <p></p>

        @Html.ActionLink("Regeln importieren", "Upload", null, new { @class = "btn btn-default btn-block" })
    </div>

    <div class="col-sm-4"></div>

    <div class="col-sm-4">
        <hr/>
        <h4>Regeln anwenden</h4>

        @using (Html.BeginForm("Apply", "ManageRules"))
        {
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-default btn-block">Regeln auf alle Buchungszeilen anwenden</button>
        }
    </div>
</div>

@section scripts {
    @* ReSharper disable once InconsistentNaming *@
    <script>
        erbsenzaehlerServices.factory('Rule', function($resource) {
            return $resource('@Url.Action("Json")/:id', { id: '@@id' }, {
                update: {
                    method: 'PUT'
                }
            });
        });
        erbsenzaehlerControllers.controller('rulesController', function($scope, Rule) {
            $scope.ignoreOptions = [
                { name: 'Ignorieren', value: true }, { name: 'Nicht ignorieren', value: false }
            ];
            $scope.dateOptions = [
                { name: 'Ersten des Monats', value: @((int) Rule.ChangeDateToOption.FirstOfCurrentMonth) }, 
                { name: 'Letzten des Monats', value: @((int) Rule.ChangeDateToOption.LastOfCurrentMonth) }, 
                { name: 'Nahsten Monatsersten', value: @((int) Rule.ChangeDateToOption.NearestFirstOfMonth) }, 
                { name: 'Nahsten Monatsletzten', value: @((int) Rule.ChangeDateToOption.NearestLastOfMonth) }
            ];

            $scope.loadRules = function(callback) {
                $scope.loading = true;
                $scope.rules = Rule.query(function() {
                    $scope.loading = false;

                    if (callback) {
                        callback();
                    }
                });
            };

            $scope.addRule = function() {
                $scope.loading = true;
                var newRule = new Rule();
                newRule.regex = '';
                newRule.category = '';
                Rule.save(newRule, function() {
                    $scope.loadRules(function() {
                        // set focus to the first textarea, this should be the just added line.
                        setTimeout(function() {
                            var requiredFields = $(".rules-editor textarea");
                            if (requiredFields.length > 0) {
                                requiredFields[0].focus();
                            }
                        }, 100);
                    });
                });
            };

            $scope.saveRule = function(updatedRule, event) {
                if (event) {
                    var control = $(event.target);
                    if (control.attr("required") && control.val().length <= 0) {
                        setTimeout(function() { control.focus(); }, 50);
                        return;
                    }
                }

                updatedRule.$update();
            };

            $scope.deleteRule = function(deletedRule) {
                deletedRule.$delete(function() {
                    var index = $scope.rules.indexOf(deletedRule);
                    $scope.rules.splice(index, 1);
                });
            };


            $scope.loadRules();
        });
    </script>
}