@using Erbsenzaehler.Models
@model Erbsenzaehler.ViewModels.ManageBudgets.IndexViewModel

<h2>Budgets verwalten</h2>

<datalist id="categoriesDatalist">
    @foreach (var category in Model.Categories)
    {
        <option value="@category"></option>
    }
</datalist>

<div ng-app="erbsenzaehlerApp" ng-controller="budgetsController">
    <table class="table table-striped budgets-editor" ng-show="!loading && budgets.length > 0">
        <tr>
            <th>Kategorie</th>
            <th>Limit</th>
            <th>
                <button class="btn btn-sm btn-success pull-right" ng-click="addBudget()">Neues Budget hinzufügen</button>
            </th>
        </tr>

        <tr ng-repeat="budget in budgets">
            <td>
                <input type="text" list="categoriesDatalist" ng-model="budget.category" ng-blur="saveBudget(budget, $event)" class="form-control" placeholder="Kategorie" required/>
            </td>
            <td>
                <input type="number" step="10" ng-model="budget.limit" ng-blur="saveBudget(budget, $event)" class="form-control" placeholder="Limit" required/> € pro
                <select ng-model="budget.period" class="form-control" ng-change="saveBudget(budget, $event)" ng-options="o.value as o.name for o in periodOptions" ng-init="Monthly"></select>
            </td>
            <td>
                <div>
                    <button class="btn btn-sm btn-danger pull-right" ng-click="deleteBudget(budget)">Löschen</button>
                </div>
            </td>
        </tr>
    </table>

    <div class="alert alert-warning" ng-show="!loading && budgets.length <= 0">
        <button class="btn btn-success pull-right" ng-click="addBudget()">Budget erstellen</button>

        <p>
            Sie haben noch keine Budgets erstellt. Verwenden Sie Budgets, um Ausgabelimits für bestimmte Kategorien zu überwachen.
            So künnen Sie beispielsweise für die Kategorie "Party" ein monatliches Ausgabelimit von 100 € anlegen.
        </p>

        <p>
            Der Erbsenzähler kann Sie natürlich nicht zwingen, gewisse Ausgaben nicht zu tätigen. Aber er kann Sie warnen, wenn Sie kurz davor stehen, ein Ausgabelimit zu überschreiten.
        </p>

        <p>
            Tipp: Verwenden Sie <a href="@Url.Action("Index", "ManageRules")" class="alert-link">Regeln</a> um automatisch Buchungszeilen mit den passenden Kategorien zu versehen.
        </p>
    </div>
</div>

@section scripts {
    @* ReSharper disable once InconsistentNaming *@
    <script>
        erbsenzaehlerServices.factory('Budget', function($resource) {
            return $resource('@Url.Action("Json")/:id', { id: '@@id' }, {
                update: {
                    method: 'PUT'
                }
            });
        });
        erbsenzaehlerControllers.controller('budgetsController', function($scope, Budget) {
            $scope.periodOptions = [
                { name: 'Monat', value: @((int) Budget.LimitPeriod.Monthly) }, { name: 'Woche', value: @((int) Budget.LimitPeriod.Weekly) }, { name: 'Jahr', value: @((int) Budget.LimitPeriod.Yearly) }, { name: 'Tag', value: @((int) Budget.LimitPeriod.Daily) }
            ];

            $scope.loadBudgets = function(callback) {
                $scope.loading = true;
                $scope.budgets = Budget.query(function() {
                    $scope.loading = false;
                    if (callback) {
                        callback();
                    }
                });
            };

            $scope.addBudget = function() {
                $scope.loading = true;
                var newBudget = new Budget();

                newBudget.category = '';
                newBudget.limit = 100;
                newBudget.period = $scope.periodOptions[0].value;

                Budget.save(newBudget, function() {
                    $scope.loadBudgets(function() {
                        // set focus to the first input, this should be the just added line.
                        setTimeout(function() {
                            var requiredFields = $(".budgets-editor input");
                            if (requiredFields.length > 0) {
                                requiredFields[0].focus();
                            }
                        }, 100);
                    });
                });
            };

            $scope.saveBudget = function(updatedBudget, event) {
                if (event) {
                    var control = $(event.target);
                    control.parent().removeClass("has-error");

                    if (control.attr("required") && control.val().length <= 0) {
                        setTimeout(function() {
                            control.focus();
                            control.parent().addClass("has-error");
                        }, 50);
                        return;
                    }
                }

                updatedBudget.$update();
            };

            $scope.deleteBudget = function(deletedBudget) {
                deletedBudget.$delete(function() {
                    var index = $scope.budgets.indexOf(deletedBudget);
                    $scope.budgets.splice(index, 1);
                });
            };


            $scope.loadBudgets();
        });
    </script>
}